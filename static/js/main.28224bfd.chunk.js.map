{"version":3,"sources":["actions/quotesTypes.ts","components/QuoteView.tsx","components/MainPage.tsx","actions/quotesActions.ts","App.tsx","reducers/index.ts","reducers/quotesReducer.ts","tools/store.ts","index.tsx"],"names":["GET_QUOTES","QuoteView","quotesList","useSelector","globalState","quotes","length","quote","MainPage","dispatch","useDispatch","useEffect","dispath","fetch","then","response","json","type","actionTypes","App","className","combineReducers","state","action","paylod","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"kMAEaA,EAAa,a,cCGbC,EAAgB,WAAO,IACxBC,EAAeC,aAAoC,SAAAC,GAAW,sBAC/DA,EAAYC,WADXH,WAIR,OACI,8BACKA,EAAWI,OAAS,GACjB,8BAAMJ,EAAW,GAAGK,WCLvBC,EAAe,WACpB,IAAMC,EAAWC,cAKrB,OAJIC,qBAAU,WACNF,GCPkC,SAACG,GAE3C,OACIC,MAAM,yIACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACZ,GACHU,EAAQ,CACJK,KAAMC,EACNhB,uBDAL,IAGH,8BACI,cAAC,EAAD,OEJGiB,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,O,cCHSC,cAAgB,CAC7BhB,OCOa,WAA0C,IAAzCiB,EAAwC,uDALZ,CAC1CpB,WAAY,IAI0BqB,EAAgB,uCACtD,OAAQA,EAAON,MACb,KAAKC,EACH,IAAMM,EAAgDD,EACtD,OAAO,2BACFD,GADL,IAEEpB,WAAYsB,EAAOtB,aAGvB,QACE,OAAOoB,MCfEG,EAFDC,YAAYC,EAAUC,YAAgBC,MCEpDC,IAASC,OACP,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFO,SAASC,eAAe,W","file":"static/js/main.28224bfd.chunk.js","sourcesContent":["import {IQuote} from '../entities/IQuote';\r\n\r\nexport const GET_QUOTES = 'GET_QUOTES';\r\n\r\nexport interface IQuoteTypes {\r\n    GET_QUOTES: {\r\n        quotesList: IQuote;\r\n    }\r\n}\r\n\r\n","import React, { FC } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { IQuotesReducer } from '../reducers/quotesReducer';\r\nimport { IState } from '../reducers';\r\n\r\nexport const QuoteView: FC = () => {\r\n    const { quotesList } = useSelector<IState, IQuotesReducer>(globalState => ({\r\n        ...globalState.quotes,\r\n    }));\r\n\r\n    return (\r\n        <div>\r\n            {quotesList.length > 0 && (\r\n                <div>{quotesList[0].quote}</div>\r\n            )}\r\n        </div>\r\n    );\r\n};","import React, { FC, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { getQuotes } from '../actions/quotesActions';\r\nimport {QuoteView} from './QuoteView';\r\n\r\ntype GetQuotes = ReturnType<typeof getQuotes>;\r\n\r\n\r\nexport const MainPage: FC = () => {\r\n        const dispatch = useDispatch();\r\n        useEffect(() => {\r\n            dispatch<GetQuotes>(getQuotes());\r\n        }, []);\r\n\r\n    return (\r\n        <div>\r\n            <QuoteView />\r\n        </div>\r\n    );\r\n};","import { Dispatch } from 'redux';\r\nimport * as actionTypes from './quotesTypes';\r\nimport { IQuote } from '../entities/IQuote';\r\n\r\nexport const getQuotes = (): Promise<any> => ((dispath: Dispatch) => {\r\n\r\n    return (\r\n        fetch('https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json') \r\n        .then(response => response.json())\r\n        .then((quotesList: IQuote) => {\r\n            dispath({\r\n                type: actionTypes.GET_QUOTES,\r\n                quotesList\r\n            })\r\n        })\r\n    )\r\n}) as any;","import React from 'react';\nimport './App.css';\nimport {MainPage} from './components/MainPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainPage />\n    </div>\n  );\n}\n\nexport default App;\n","import {combineReducers} from 'redux';\r\n\r\nimport quotes, { IQuotesReducer } from './quotesReducer';\r\n\r\nexport default combineReducers({\r\n  quotes,\r\n});\r\n\r\nexport interface IState {\r\n  quotes: IQuotesReducer;\r\n}\r\n\r\n","import {IQuote} from '../entities/IQuote';\r\nimport * as actionTypes from '../actions/quotesTypes';\r\n\r\nexport interface IQuotesReducer {\r\n  quotesList: IQuote[];\r\n}\r\n\r\nconst defaultState = (): IQuotesReducer => ({\r\n  quotesList: [],\r\n});\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default (state = defaultState(), action: any) => {\r\n  switch (action.type) {\r\n    case actionTypes.GET_QUOTES: {\r\n      const paylod: actionTypes.IQuoteTypes[\"GET_QUOTES\"] = action;\r\n      return {\r\n        ...state,\r\n        quotesList: paylod.quotesList,\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}","import {createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport reducers from '../reducers';\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './tools/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}