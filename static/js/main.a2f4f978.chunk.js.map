{"version":3,"sources":["actions/quotesTypes.ts","actions/selectedTypes.ts","components/QuoteView.tsx","actions/selectedActions.ts","components/MainPage.tsx","actions/quotesActions.ts","App.tsx","reducers/index.ts","reducers/quotesReducer.ts","reducers/selectedReducer.ts","tools/store.ts","index.tsx"],"names":["GET_QUOTES","GET_RANDOM","PREVIOUS_QUOTE","GET_SELECTED_QUOTE","QuoteSection","styled","section","QuoteDiv","div","AuthorDiv","ButtonsDiv","Button","button","QuoteView","useSelector","globalState","quotes","selected","quotesList","selectedQuote","dispatch","useDispatch","DrawQuote","quote","random_number","Math","floor","random","length","type","actionTypes","payload","useEffect","author","onClick","MainWrapper","MainPage","dispath","fetch","then","response","json","App","className","combineReducers","state","action","paylod","selectedList","numberToUndo","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"qNAEaA,EAAa,a,OCFbC,EAAa,aACbC,EAAiB,iBACjBC,EAAqB,qB,cCQ5BC,EAAeC,IAAOC,QAAV,iEAKZC,EAAWF,IAAOG,IAAV,0EAKRC,EAAYJ,IAAOG,IAAV,+EAKTE,EAAaL,IAAOG,IAAV,0KASVG,EAASN,IAAOO,OAAV,yyBA4BCC,EAAgB,WAAO,IAAD,EACOC,aAAuD,SAAAC,GAAW,kCACjGA,EAAYC,QACZD,EAAYE,aAFXC,EADuB,EACvBA,WAAYC,EADW,EACXA,cAIdC,EAAWC,cAIXC,EAAY,WACd,ICjEoBC,EDiEhBC,EAAgBC,KAAKC,MAAMD,KAAKE,SAAWT,EAAWU,QAC1DR,GClEoBG,EDkEiBL,EAAWM,GClET,CAC3CK,KAAMC,EACNC,QAAS,CAACR,aD6EV,OANAS,qBAAU,YACQ,OAAVd,QAAU,IAAVA,OAAA,EAAAA,EAAYU,QAAS,GACrBN,MAEL,CAACJ,IAGA,gCACI,eAACd,EAAD,WACI,cAACG,EAAD,UACKY,EAAcI,QAEnB,eAACd,EAAD,gBACOU,EAAcc,aAGzB,eAACvB,EAAD,WACI,cAACC,EAAD,CAAQuB,QAASZ,EAAjB,mBACA,cAACX,EAAD,CAAQuB,QAtBH,WACbd,EC1E4B,CAChCS,KAAMC,KD8FM,2BE1FVK,EAAc9B,IAAOG,IAAV,sEAKJ4B,EAAe,WACpB,IAAMhB,EAAWC,cAKrB,OAJIW,qBAAU,WACNZ,GCZkC,SAACiB,GAE3C,OACIC,MAAM,yIACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACrB,GACHmB,EAAQ,CACJR,KAAMC,EACNZ,uBDKL,IAGH,cAACiB,EAAD,UACI,cAAC,EAAD,OETGO,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,O,uBCFSC,cAAgB,CAC7B5B,OCMa,WAA0C,IAAzC6B,EAAwC,uDALZ,CAC1C3B,WAAY,IAI0B4B,EAAgB,uCACtD,OAAQA,EAAOjB,MACb,KAAKC,EACH,IAAMiB,EAAgDD,EACtD,OAAO,2BACFD,GADL,IAEE3B,WAAY6B,EAAO7B,aAGvB,QACE,OAAO2B,IDfX5B,SEYa,WAA0C,IAAzC4B,EAAwC,uDAVV,CAC5CG,aAAc,GACdC,aAAc,EACd9B,cAAe,CACXI,MAAO,GACPU,OAAQ,KAK0Ba,EAAgB,uCACtD,OAAQA,EAAOjB,MACb,KAAKC,EACD,OAAO,2BACAe,GADP,IAEI1B,cAAe0B,EAAM1B,gBAG7B,KAAKW,EACD,OAAO,2BACAe,GADP,IAEI1B,cAAe2B,EAAOf,QAAQR,MAC9ByB,aAAa,GAAD,mBAAMH,EAAMG,cAAZ,CAA0BF,EAAOf,QAAQR,QACrD0B,aAAc,IAGtB,KAAKnB,EACD,OAAGe,EAAMG,aAAapB,OAASiB,EAAMI,aAAa,EAC3C,2BACAJ,GADP,IAEI1B,cAAe0B,EAAMG,aAAaH,EAAMG,aAAapB,OAASiB,EAAMI,cACpEA,aAAcJ,EAAMI,aAAe,IAI5B,2BACAJ,GADP,IAEI1B,cAAe0B,EAAM1B,gBAIjC,QACE,OAAO0B,MC5CEK,EAFDC,YAAYC,EAAUC,YAAgBC,MCEpDC,IAASC,OACP,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFO,SAASC,eAAe,W","file":"static/js/main.a2f4f978.chunk.js","sourcesContent":["import {IQuote} from '../entities/IQuote';\r\n\r\nexport const GET_QUOTES = 'GET_QUOTES';\r\n\r\nexport interface IQuoteTypes {\r\n    GET_QUOTES: {\r\n        quotesList: IQuote;\r\n    }\r\n}\r\n\r\n","export const GET_RANDOM = 'GET_RANDOM';\r\nexport const PREVIOUS_QUOTE = \"PREVIOUS_QUOTE\";\r\nexport const GET_SELECTED_QUOTE = \"GET_SELECTED_QUOTE\";","import { FC, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { IQuotesReducer } from '../reducers/quotesReducer';\r\nimport { IState } from '../reducers';\r\nimport { randomQuote } from '../actions/selectedActions';\r\nimport { previuosQuote } from '../actions/selectedActions';\r\nimport { useDispatch } from 'react-redux';\r\nimport { ISelectedReducer } from '../reducers/selectedReducer';\r\nimport styled from 'styled-components';\r\n\r\nconst QuoteSection = styled.section`\r\n    height: 30vh;\r\n    color: #fff;\r\n`;\r\n\r\nconst QuoteDiv = styled.div`\r\n    font-size: 2vw;\r\n    font-style: italic;\r\n`;\r\n\r\nconst AuthorDiv = styled.div`\r\n    font-size: 1.4vw;\r\n    padding: 5vh 0 0 35vw;\r\n`;\r\n\r\nconst ButtonsDiv = styled.div`\r\n    margin: auto;\r\n    padding-top: 15vh;\r\n    width: 50%;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: space-around;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    color: #fff !important;\r\n    text-transform: uppercase;\r\n    text-decoration: none;\r\n    background: #60a3bc;\r\n    padding: 20px;\r\n    border-radius: 50px;\r\n    display: inline-block;\r\n    border: none;\r\n    transition: all 0.4s ease 0s;\r\n    cursor: pointer;\r\n\r\n    :hover{\r\n        text-shadow: 0px 0px 6px rgba(255, 255, 255, 1);\r\n        -webkit-box-shadow: 0px 5px 40px -10px rgba(255,255,255,0.7);\r\n        -moz-box-shadow: 0px 5px 40px -10px rgba(255,255,255,0.7);\r\n        transition: all 0.4s ease 0s;\r\n    }\r\n    :active {\r\n        text-shadow: 0px 0px 0px rgba(255, 255, 255, 1);\r\n        -webkit-box-shadow: 0px 0px 0px 0px rgba(255,255,255,0.7);\r\n        -moz-box-shadow: 0px 0px 0px 0px rgba(255,255,255,0.7);\r\n        transition: all 0.1s ease 0s;\r\n    }\r\n    \r\n`;\r\n\r\n\r\nexport const QuoteView: FC = () => {\r\n    const { quotesList, selectedQuote } = useSelector<IState, IQuotesReducer & ISelectedReducer>(globalState => ({\r\n        ...globalState.quotes,\r\n        ...globalState.selected\r\n    }));\r\n    const dispatch = useDispatch();\r\n    type GetRandomQuote = ReturnType<typeof randomQuote>;\r\n    type PreviousQuote = ReturnType<typeof previuosQuote>;\r\n\r\n    const DrawQuote = () => {\r\n        let random_number = Math.floor(Math.random() * quotesList.length);\r\n        dispatch<GetRandomQuote>(randomQuote(quotesList[random_number]));\r\n    };\r\n\r\n    const Backward = () => {\r\n        dispatch<PreviousQuote>(previuosQuote());\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (quotesList?.length > 0) {\r\n            DrawQuote();\r\n        }\r\n    }, [quotesList]);\r\n\r\n    return (\r\n        <div>\r\n            <QuoteSection>\r\n                <QuoteDiv>\r\n                    {selectedQuote.quote}\r\n                </QuoteDiv>\r\n                <AuthorDiv>\r\n                    ~ {selectedQuote.author}\r\n                </AuthorDiv>\r\n            </QuoteSection>\r\n            <ButtonsDiv>\r\n                <Button onClick={DrawQuote}>Losuj</Button>\r\n                <Button onClick={Backward}>Wstecz</Button>\r\n            </ButtonsDiv>\r\n        </div>\r\n    );\r\n};","import * as actionTypes from './selectedTypes';\r\nimport { IQuote } from '../entities/IQuote';\r\n\r\nexport const previuosQuote = () => ({\r\n    type: actionTypes.PREVIOUS_QUOTE\r\n});\r\n\r\nexport const randomQuote = (quote: IQuote) => ({\r\n    type: actionTypes.GET_RANDOM,\r\n    payload: {quote}\r\n})\r\n\r\nexport const getSelectedQuote = () => ({\r\n    type: actionTypes.GET_SELECTED_QUOTE\r\n})","import { FC, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { getQuotes } from '../actions/quotesActions';\r\nimport {QuoteView} from './QuoteView';\r\nimport styled from 'styled-components';\r\n\r\ntype GetQuotes = ReturnType<typeof getQuotes>;\r\n\r\nconst MainWrapper = styled.div`\r\n    width: 100%;\r\n    padding-top: 30vh;\r\n`;\r\n\r\nexport const MainPage: FC = () => {\r\n        const dispatch = useDispatch();\r\n        useEffect(() => {\r\n            dispatch<GetQuotes>(getQuotes());\r\n        }, []);\r\n\r\n    return (\r\n        <MainWrapper>\r\n            <QuoteView />\r\n        </MainWrapper>\r\n    );\r\n};","import { Dispatch } from 'redux';\r\nimport * as actionTypes from './quotesTypes';\r\nimport { IQuote } from '../entities/IQuote';\r\n\r\nexport const getQuotes = (): Promise<any> => ((dispath: Dispatch) => {\r\n\r\n    return (\r\n        fetch('https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json') \r\n        .then(response => response.json())\r\n        .then((quotesList: IQuote) => {\r\n            dispath({\r\n                type: actionTypes.GET_QUOTES,\r\n                quotesList\r\n            })\r\n        })\r\n    )\r\n}) as any;","import React from 'react';\nimport './App.css';\nimport {MainPage} from './components/MainPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainPage />\n    </div>\n  );\n}\n\nexport default App;\n","import {combineReducers} from 'redux';\r\n\r\nimport quotes, { IQuotesReducer } from './quotesReducer';\r\nimport selected, {ISelectedReducer} from './selectedReducer';\r\n\r\nexport default combineReducers({\r\n  quotes,\r\n  selected\r\n});\r\n\r\nexport interface IState {\r\n  quotes: IQuotesReducer;\r\n  selected: ISelectedReducer;\r\n}\r\n\r\n","import {IQuote} from '../entities/IQuote';\r\nimport * as actionTypes from '../actions/quotesTypes';\r\n\r\nexport interface IQuotesReducer {\r\n  quotesList: IQuote[];\r\n}\r\n\r\nconst defaultState = (): IQuotesReducer => ({\r\n  quotesList: [],\r\n});\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default (state = defaultState(), action: any) => {\r\n  switch (action.type) {\r\n    case actionTypes.GET_QUOTES: {\r\n      const paylod: actionTypes.IQuoteTypes[\"GET_QUOTES\"] = action;\r\n      return {\r\n        ...state,\r\n        quotesList: paylod.quotesList,\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}","import {IQuote} from '../entities/IQuote';\r\nimport * as actionTypes from '../actions/selectedTypes';\r\n\r\nexport interface ISelectedReducer {\r\n  selectedList: IQuote[];\r\n  numberToUndo: number;\r\n  selectedQuote: IQuote;\r\n}\r\n\r\nconst defaultState = (): ISelectedReducer => ({\r\n  selectedList: [],\r\n  numberToUndo: 2,\r\n  selectedQuote: {\r\n      quote: '',\r\n      author: ''\r\n  }\r\n});\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default (state = defaultState(), action: any) => {\r\n  switch (action.type) {\r\n    case actionTypes.GET_SELECTED_QUOTE: {\r\n        return {\r\n            ...state,\r\n            selectedQuote: state.selectedQuote\r\n        }\r\n    }\r\n    case actionTypes.GET_RANDOM: {\r\n        return {\r\n            ...state,\r\n            selectedQuote: action.payload.quote,\r\n            selectedList: [...state.selectedList, action.payload.quote],\r\n            numberToUndo: 2\r\n        }\r\n    }\r\n    case actionTypes.PREVIOUS_QUOTE: {\r\n        if(state.selectedList.length > state.numberToUndo-1) {\r\n        return {\r\n            ...state,\r\n            selectedQuote: state.selectedList[state.selectedList.length - state.numberToUndo],\r\n            numberToUndo: state.numberToUndo + 1\r\n        }\r\n        }\r\n        else {\r\n            return {\r\n                ...state,\r\n                selectedQuote: state.selectedQuote\r\n            }\r\n        }\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}","import {createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport reducers from '../reducers';\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './tools/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}